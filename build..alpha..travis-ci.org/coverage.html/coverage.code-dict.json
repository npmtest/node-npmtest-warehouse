{"/home/travis/build/npmtest/node-npmtest-warehouse/test.js":"/* istanbul instrument in package npmtest_warehouse */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-warehouse/lib.npmtest_warehouse.js":"/* istanbul instrument in package npmtest_warehouse */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_warehouse = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_warehouse = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-warehouse/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-warehouse && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_warehouse */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_warehouse\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_warehouse.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_warehouse.rollup.js'] =\n            local.assetsDict['/assets.npmtest_warehouse.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_warehouse.__dirname + '/lib.npmtest_warehouse.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/database.js":"'use strict';\n\nvar JSONStream = require('JSONStream');\nvar Promise = require('bluebird');\nvar fs = require('graceful-fs');\nvar _ = require('lodash');\nvar Model = require('./model');\nvar Schema = require('./schema');\nvar SchemaType = require('./schematype');\nvar util = require('./util');\nvar WarehouseError = require('./error');\nvar pkg = require('../package.json');\nvar extend = _.assign;\n\n/**\n * Database constructor.\n *\n * @class\n * @param {object} [options]\n *   @param {number} [options.version=0] Database version\n *   @param {string} [options.path] Database path\n *   @param {function} [options.onUpgrade] Triggered when the database is upgraded\n *   @param {function} [options.onDowngrade] Triggered when the database is downgraded\n */\nfunction Database(options) {\n  this.options = extend({\n    version: 0,\n    onUpgrade: function() {},\n\n    onDowngrade: function() {}\n  }, options);\n\n  this._models = {};\n\n  var _Model = this.Model = function(name, schema) {\n    Model.call(this, name, schema);\n  };\n\n  util.inherits(_Model, Model);\n  _Model.prototype._database = this;\n}\n\n/**\n * Creates a new model.\n *\n * @param {string} name\n * @param {Schema|object} [schema]\n * @return {Model}\n */\nDatabase.prototype.model = function(name, schema) {\n  if (this._models[name]) {\n    return this._models[name];\n  }\n\n  var model = this._models[name] = new this.Model(name, schema);\n  return model;\n};\n\n/**\n * Loads database.\n *\n * @param {function} [callback]\n * @return {Promise}\n */\nDatabase.prototype.load = function(callback) {\n  var path = this.options.path;\n  var self = this;\n\n  if (!path) throw new WarehouseError('options.path is required');\n\n  return new Promise(function(resolve, reject) {\n    var src = fs.createReadStream(path, {encoding: 'utf8'});\n    var oldVersion = 0;\n\n    var stream = JSONStream.parse([true, true], function(value, keys) {\n      switch (keys.shift()){\n        case 'meta':\n          if (keys.shift() === 'version') {\n            oldVersion = value;\n          }\n\n          break;\n\n        case 'models':\n          self.model(keys.shift())._import(value);\n          break;\n      }\n    });\n\n    src\n      .pipe(stream)\n      .on('error', reject)\n      .on('end', function() {\n        resolve(oldVersion);\n      });\n  }).then(function(oldVersion) {\n    var newVersion = self.options.version;\n\n    if (newVersion > oldVersion) {\n      return self.options.onUpgrade(oldVersion, newVersion);\n    } else if (newVersion < oldVersion) {\n      return self.options.onDowngrade(oldVersion, newVersion);\n    }\n  }).asCallback(callback);\n};\n\n/**\n * Saves database.\n *\n * @param {function} [callback]\n * @return {Promise}\n */\nDatabase.prototype.save = function(callback) {\n  var path = this.options.path;\n  var self = this;\n\n  if (!path) throw new WarehouseError('options.path is required');\n\n  return new Promise(function(resolve, reject) {\n    var stream = fs.createWriteStream(path);\n\n    // Start\n    stream.write('{');\n\n    // Meta\n    stream.write('\"meta\":' + JSON.stringify({\n      version: self.options.version,\n      warehouse: pkg.version\n    }) + ',');\n\n    // Export models\n    var models = self._models;\n    var keys = Object.keys(models);\n    var model, key;\n\n    stream.write('\"models\":{');\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      model = models[key];\n\n      if (!model) continue;\n\n      if (i) stream.write(',');\n      stream.write('\"' + key + '\":' + model._export());\n    }\n\n    stream.write('}');\n\n    // End\n    stream.end('}');\n\n    stream.on('error', reject)\n      .on('finish', resolve);\n  }).asCallback(callback);\n};\n\nDatabase.Schema = Database.prototype.Schema = Schema;\nDatabase.SchemaType = Database.prototype.SchemaType = SchemaType;\nDatabase.version = pkg.version;\n\nmodule.exports = Database;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/model.js":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar util = require('./util');\nvar Document = require('./document');\nvar Query = require('./query');\nvar Schema = require('./schema');\nvar Types = require('./types');\nvar WarehouseError = require('./error');\nvar PopulationError = require('./error/population');\nvar Mutex = require('./mutex');\n\nvar parseArgs = util.parseArgs;\nvar reverse = util.reverse;\nvar shuffle = _.shuffle;\nvar getProp = util.getProp;\nvar setGetter = util.setGetter;\nvar extend = _.assign;\nvar isArray = Array.isArray;\n\n/**\n * Model constructor.\n *\n * @class\n * @param {string} name Model name\n * @param {Schema|object} [schema] Schema\n * @extends EventEmitter\n */\nfunction Model(name, schema_) {\n  EventEmitter.call(this);\n\n  var schema, i, len, key;\n\n  // Define schema\n  if (schema_ instanceof Schema) {\n    schema = schema_;\n  } else if (typeof schema_ === 'object') {\n    schema = new Schema(schema_);\n  } else {\n    schema = new Schema();\n  }\n\n  // Set `_id` path for schema\n  if (!schema.path('_id')) {\n    schema.path('_id', {type: Types.CUID, required: true});\n  }\n\n  this.name = name;\n  this.data = {};\n  this._mutex = new Mutex();\n  this.schema = schema;\n  this.length = 0;\n\n  var _Document = this.Document = function(data) {\n    Document.call(this, data);\n\n    // Apply getters\n    schema._applyGetters(this);\n  };\n\n  util.inherits(_Document, Document);\n  _Document.prototype._model = this;\n  _Document.prototype._schema = schema;\n\n  var _Query = this.Query = function(data) {\n    Query.call(this, data);\n  };\n\n  util.inherits(_Query, Query);\n  _Query.prototype._model = this;\n  _Query.prototype._schema = schema;\n\n  // Apply static methods\n  var statics = schema.statics;\n  var staticKeys = Object.keys(statics);\n\n  for (i = 0, len = staticKeys.length; i < len; i++) {\n    key = staticKeys[i];\n    this[key] = statics[key];\n  }\n\n  // Apply instance methods\n  var methods = schema.methods;\n  var methodKeys = Object.keys(methods);\n\n  for (i = 0, len = methodKeys.length; i < len; i++) {\n    key = methodKeys[i];\n    _Document.prototype[key] = methods[key];\n  }\n}\n\nutil.inherits(Model, EventEmitter);\n\n/**\n * Creates a new document.\n *\n * @param {object} data\n * @return {Document}\n */\nModel.prototype.new = function(data) {\n  return new this.Document(data);\n};\n\n/**\n * Finds a document by its identifier.\n *\n * @param {*} id\n * @param {object} options\n *   @param {boolean} [options.lean=false] Returns a plain JavaScript object\n * @return {Document|object}\n */\nModel.prototype.findById = function(id, options_) {\n  var raw = this.data[id];\n  if (!raw) return;\n\n  var options = extend({\n    lean: false\n  }, options_);\n\n  var data = _.cloneDeep(raw);\n  return options.lean ? data : this.new(data);\n};\n\nModel.prototype.get = Model.prototype.findById;\n\n/**\n * Checks if the model contains a document with the specified id.\n *\n * @param {*} id\n * @return {boolean}\n */\nModel.prototype.has = function(id) {\n  return Boolean(this.data[id]);\n};\n\nfunction execHooks(schema, type, event, data) {\n  var hooks = schema.hooks[type][event];\n  if (!hooks.length) return Promise.resolve(data);\n\n  return Promise.each(hooks, function(hook) {\n    return hook(data);\n  }).thenReturn(data);\n}\n\n/**\n * Acquires write lock.\n *\n * @param {*} id\n * @return {Promise}\n * @private\n */\nModel.prototype._acquireWriteLock = function(id) {\n  var mutex = this._mutex;\n\n  return new Promise(function(resolve, reject) {\n    mutex.lock(resolve);\n  }).disposer(function() {\n    mutex.unlock();\n  });\n};\n\n/**\n * Inserts a document.\n *\n * @param {Document|object} data\n * @return {Promise}\n * @private\n */\nModel.prototype._insertOne = function(data_) {\n  var self = this;\n  var schema = this.schema;\n\n  // Apply getters\n  var data = data_ instanceof self.Document ? data_ : self.new(data_);\n  var id = data._id;\n\n  // Check ID\n  if (!id) {\n    return Promise.reject(new WarehouseError('ID is not defined', WarehouseError.ID_UNDEFINED));\n  }\n\n  if (this.has(id)) {\n    return Promise.reject(new WarehouseError('ID `' + id + '` has been used', WarehouseError.ID_EXIST));\n  }\n\n  // Apply setters\n  var result = data.toObject();\n  schema._applySetters(result);\n\n  // Pre-hooks\n  return execHooks(schema, 'pre', 'save', data).then(function(data) {\n    // Insert data\n    self.data[id] = result;\n    self.length++;\n\n    self.emit('insert', data);\n    return execHooks(schema, 'post', 'save', data);\n  });\n};\n\n/**\n * Inserts a document.\n *\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.insertOne = function(data, callback) {\n  var self = this;\n\n  return Promise.using(this._acquireWriteLock(), function() {\n    return self._insertOne(data);\n  }).asCallback(callback);\n};\n\n/**\n * Inserts documents.\n *\n * @param {object|array} data\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.insert = function(data, callback) {\n  if (isArray(data)) {\n    var self = this;\n\n    return Promise.mapSeries(data, function(item) {\n      return self.insertOne(item);\n    }).asCallback(callback);\n  }\n\n  return this.insertOne(data, callback);\n};\n\n/**\n * Inserts the document if it does not exist; otherwise updates it.\n *\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.save = function(data, callback) {\n  var id = data._id;\n  var self = this;\n\n  if (!id) return this.insertOne(data, callback);\n\n  return Promise.using(this._acquireWriteLock(), function() {\n    if (self.has(id)) {\n      return self._replaceById(id, data);\n    }\n\n    return self._insertOne(data);\n  }).asCallback(callback);\n};\n\n/**\n * Updates a document with a compiled stack.\n *\n * @param {*} id\n * @param {array} stack\n * @return {Promise}\n * @private\n */\nModel.prototype._updateWithStack = function(id, stack) {\n  var self = this;\n  var schema = self.schema;\n\n  var data = self.data[id];\n\n  if (!data) {\n    return Promise.reject(new WarehouseError('ID `' + id + '` does not exist', WarehouseError.ID_NOT_EXIST));\n  }\n\n  // Clone data\n  var result = _.cloneDeep(data);\n\n  // Update\n  for (var i = 0, len = stack.length; i < len; i++) {\n    stack[i](result);\n  }\n\n  // Apply getters\n  var doc = self.new(result);\n\n  // Apply setters\n  result = doc.toObject();\n  schema._applySetters(result);\n\n  // Pre-hooks\n  return execHooks(schema, 'pre', 'save', doc).then(function(data) {\n    // Update data\n    self.data[id] = result;\n\n    self.emit('update', data);\n    return execHooks(schema, 'post', 'save', data);\n  });\n};\n\n/**\n * Finds a document by its identifier and update it.\n *\n * @param {*} id\n * @param {object} update\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.updateById = function(id, update, callback) {\n  var self = this;\n\n  return Promise.using(this._acquireWriteLock(), function() {\n    var stack = self.schema._parseUpdate(update);\n    return self._updateWithStack(id, stack);\n  }).asCallback(callback);\n};\n\n/**\n * Updates matching documents.\n *\n * @param {object} query\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.update = function(query, data, callback) {\n  return this.find(query).update(data, callback);\n};\n\n/**\n * Finds a document by its identifier and replace it.\n *\n * @param {*} id\n * @param  {object} data\n * @return {Promise}\n * @private\n */\nModel.prototype._replaceById = function(id, data_) {\n  var self = this;\n  var schema = this.schema;\n\n  if (!this.has(id)) {\n    return Promise.reject(new WarehouseError('ID `' + id + '` does not exist', WarehouseError.ID_NOT_EXIST));\n  }\n\n  data_._id = id;\n\n  // Apply getters\n  var data = data instanceof self.Document ? data_ : self.new(data_);\n\n  // Apply setters\n  var result = data.toObject();\n  schema._applySetters(result);\n\n  // Pre-hooks\n  return execHooks(schema, 'pre', 'save', data).then(function(data) {\n    // Replace data\n    self.data[id] = result;\n\n    self.emit('update', data);\n    return execHooks(schema, 'post', 'save', data);\n  });\n};\n\n/**\n * Finds a document by its identifier and replace it.\n *\n * @param {*} id\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.replaceById = function(id, data, callback) {\n  var self = this;\n\n  return Promise.using(this._acquireWriteLock(), function() {\n    return self._replaceById(id, data);\n  }).asCallback(callback);\n};\n\n/**\n * Replaces matching documents.\n *\n * @param {object} query\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.replace = function(query, data, callback) {\n  return this.find(query).replace(data, callback);\n};\n\n/**\n * Finds a document by its identifier and remove it.\n *\n * @param {*} id\n * @param {function} [callback]\n * @return {Promise}\n * @private\n */\nModel.prototype._removeById = function(id) {\n  var self = this;\n  var schema = this.schema;\n\n  var data = this.data[id];\n\n  if (!data) {\n    return Promise.reject(new WarehouseError('ID `' + id + '` does not exist', WarehouseError.ID_NOT_EXIST));\n  }\n\n  // Pre-hooks\n  return execHooks(schema, 'pre', 'remove', data).then(function(data) {\n    // Remove data\n    self.data[id] = null;\n    self.length--;\n\n    self.emit('remove', data);\n    return execHooks(schema, 'post', 'remove', data);\n  });\n};\n\n/**\n * Finds a document by its identifier and remove it.\n *\n * @param {*} id\n * @param {function} [callback]\n * @return {Promise}\n */\nModel.prototype.removeById = function(id, callback) {\n  var self = this;\n\n  return Promise.using(this._acquireWriteLock(), function() {\n    return self._removeById(id);\n  }).asCallback(callback);\n};\n\n/**\n * Removes matching documents.\n *\n * @param {object} query\n * @param {object} [callback]\n * @return {Promise}\n */\nModel.prototype.remove = function(query, callback) {\n  return this.find(query).remove(callback);\n};\n\n/**\n * Deletes a model.\n */\nModel.prototype.destroy = function() {\n  this._database._models[this.name] = null;\n};\n\n/**\n * Returns the number of elements.\n *\n * @return {number}\n */\nModel.prototype.count = function() {\n  return this.length;\n};\n\nModel.prototype.size = Model.prototype.count;\n\n/**\n * Iterates over all documents.\n *\n * @param {function} iterator\n * @param {object} [options] See {@link Model#findById}.\n */\nModel.prototype.forEach = function(iterator, options) {\n  var keys = Object.keys(this.data);\n  var num = 0;\n  var data;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    data = this.findById(keys[i], options);\n    if (data) iterator(data, num++);\n  }\n};\n\nModel.prototype.each = Model.prototype.forEach;\n\n/**\n * Returns an array containing all documents.\n *\n * @param {Object} [options] See {@link Model#findById}.\n * @return {Array}\n */\nModel.prototype.toArray = function(options) {\n  var result = new Array(this.length);\n\n  this.forEach(function(item, i) {\n    result[i] = item;\n  }, options);\n\n  return result;\n};\n\n/**\n * Finds matching documents.\n *\n * @param {Object} query\n * @param {Object} [options]\n *   @param {Number} [options.limit=0] Limits the number of documents returned.\n *   @param {Number} [options.skip=0] Skips the first elements.\n *   @param {Boolean} [options.lean=false] Returns a plain JavaScript object.\n * @return {Query|Array}\n */\nModel.prototype.find = function(query, options_) {\n  var options = options_ || {};\n  var filter = this.schema._execQuery(query);\n  var keys = Object.keys(this.data);\n  var len = keys.length;\n  var limit = options.limit || this.length;\n  var skip = options.skip;\n  var data = this.data;\n  var arr = [];\n  var key, item;\n\n  for (var i = 0; limit && i < len; i++) {\n    key = keys[i];\n    item = data[key];\n\n    if (item && filter(item)) {\n      if (skip) {\n        skip--;\n      } else {\n        arr.push(this.findById(key, options));\n        limit--;\n      }\n    }\n  }\n\n  return options.lean ? arr : new this.Query(arr);\n};\n\n/**\n * Finds the first matching documents.\n *\n * @param {Object} query\n * @param {Object} [options]\n *   @param {Number} [options.skip=0] Skips the first elements.\n *   @param {Boolean} [options.lean=false] Returns a plain JavaScript object.\n * @return {Document|Object}\n */\nModel.prototype.findOne = function(query, options_) {\n  var options = options_ || {};\n  options.limit = 1;\n\n  var result = this.find(query, options);\n  return options.lean ? result[0] : result.data[0];\n};\n\n/**\n * Sorts documents. See {@link Query#sort}.\n *\n * @param {String|Object} orderby\n * @param {String|Number} [order]\n * @return {Query}\n */\nModel.prototype.sort = function(orderby, order) {\n  var sort = parseArgs(orderby, order);\n  var fn = this.schema._execSort(sort);\n\n  return new this.Query(this.toArray().sort(fn));\n};\n\n/**\n * Returns the document at the specified index. `num` can be a positive or\n * negative number.\n *\n * @param {Number} i\n * @param {Object} [options] See {@link Model#findById}.\n * @return {Document|Object}\n */\nModel.prototype.eq = function(i_, options) {\n  var index = i_ < 0 ? this.length + i_ : i_;\n  var data = this.data;\n  var keys = Object.keys(data);\n  var key, item;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    item = data[key];\n\n    if (!item) continue;\n\n    if (index) {\n      index--;\n    } else {\n      return this.findById(key, options);\n    }\n  }\n};\n\n/**\n * Returns the first document.\n *\n * @param {Object} [options] See {@link Model#findById}.\n * @return {Document|Object}\n */\nModel.prototype.first = function(options) {\n  return this.eq(0, options);\n};\n\n/**\n * Returns the last document.\n *\n * @param {Object} [options] See {@link Model#findById}.\n * @return {Document|Object}\n */\nModel.prototype.last = function(options) {\n  return this.eq(-1, options);\n};\n\n/**\n * Returns the specified range of documents.\n *\n * @param {Number} start\n * @param {Number} [end]\n * @return {Query}\n */\nModel.prototype.slice = function(start_, end_) {\n  var total = this.length;\n\n  var start = start_ | 0;\n  if (start < 0) start += total;\n  if (start > total - 1) return new this.Query([]);\n\n  var end = end_ | 0 || total;\n  if (end < 0) end += total;\n\n  var len = start > end ? 0 : end - start;\n  if (len > total) len = total - start;\n  if (!len) return new this.Query([]);\n\n  var arr = new Array(len);\n  var keys = Object.keys(this.data);\n  var keysLen = keys.length;\n  var num = 0;\n  var data;\n\n  for (var i = 0; num < len && i < keysLen; i++) {\n    data = this.findById(keys[i]);\n    if (!data) continue;\n\n    if (start) {\n      start--;\n    } else {\n      arr[num++] = data;\n    }\n  }\n\n  return new this.Query(arr);\n};\n\n/**\n * Limits the number of documents returned.\n *\n * @param {Number} i\n * @return {Query}\n */\nModel.prototype.limit = function(i) {\n  return this.slice(0, i);\n};\n\n/**\n * Specifies the number of items to skip.\n *\n * @param {Number} i\n * @return {Query}\n */\nModel.prototype.skip = function(i) {\n  return this.slice(i);\n};\n\n/**\n * Returns documents in a reversed order.\n *\n * @return {Query}\n */\nModel.prototype.reverse = function() {\n  return new this.Query(reverse(this.toArray()));\n};\n\n/**\n * Returns documents in random order.\n *\n * @return {Query}\n */\nModel.prototype.shuffle = function() {\n  return new this.Query(shuffle(this.toArray()));\n};\n\nModel.prototype.random = Model.prototype.shuffle;\n\n/**\n * Creates an array of values by iterating each element in the collection.\n *\n * @param {Function} iterator\n * @param {Object} [options]\n * @return {Array}\n */\nModel.prototype.map = function(iterator, options) {\n  var result = new Array(this.length);\n\n  this.forEach(function(item, i) {\n    result[i] = iterator(item, i);\n  }, options);\n\n  return result;\n};\n\n/**\n * Reduces a collection to a value which is the accumulated result of iterating\n * each element in the collection.\n *\n * @param {Function} iterator\n * @param {*} [initial] By default, the initial value is the first document.\n * @return {*}\n */\nModel.prototype.reduce = function(iterator, initial) {\n  var arr = this.toArray();\n  var len = this.length;\n  var i, result;\n\n  if (initial === undefined) {\n    i = 1;\n    result = arr[0];\n  } else {\n    i = 0;\n    result = initial;\n  }\n\n  for (; i < len; i++) {\n    result = iterator(result, arr[i], i);\n  }\n\n  return result;\n};\n\n/**\n * Reduces a collection to a value which is the accumulated result of iterating\n * each element in the collection from right to left.\n *\n * @param {Function} iterator\n * @param {*} [initial] By default, the initial value is the last document.\n * @return {*}\n */\nModel.prototype.reduceRight = function(iterator, initial) {\n  var arr = this.toArray();\n  var len = this.length;\n  var i, result;\n\n  if (initial === undefined) {\n    i = len - 2;\n    result = arr[len - 1];\n  } else {\n    i = len - 1;\n    result = initial;\n  }\n\n  for (; i >= 0; i--) {\n    result = iterator(result, arr[i], i);\n  }\n\n  return result;\n};\n\n/**\n * Creates a new array with all documents that pass the test implemented by the\n * provided function.\n *\n * @param {Function} iterator\n * @param {Object} [options]\n * @return {Query}\n */\nModel.prototype.filter = function(iterator, options) {\n  var arr = [];\n\n  this.forEach(function(item, i) {\n    if (iterator(item, i)) arr.push(item);\n  }, options);\n\n  return new this.Query(arr);\n};\n\n/**\n * Tests whether all documents pass the test implemented by the provided\n * function.\n *\n * @param {Function} iterator\n * @return {Boolean}\n */\nModel.prototype.every = function(iterator) {\n  var keys = Object.keys(this.data);\n  var len = keys.length;\n  var num = 0;\n  var data;\n\n  if (!len) return true;\n\n  for (var i = 0; i < len; i++) {\n    data = this.findById(keys[i]);\n\n    if (data) {\n      if (!iterator(data, num++)) return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Tests whether some documents pass the test implemented by the provided\n * function.\n *\n * @param {Function} iterator\n * @return {Boolean}\n */\nModel.prototype.some = function(iterator) {\n  var keys = Object.keys(this.data);\n  var len = keys.length;\n  var num = 0;\n  var data;\n\n  if (!len) return false;\n\n  for (var i = 0; i < len; i++) {\n    data = this.findById(keys[i]);\n\n    if (data) {\n      if (iterator(data, num++)) return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Returns a getter function for normal population.\n *\n * @param {Object} data\n * @param {Model} model\n * @param {Object} options\n * @return {Function}\n * @private\n */\nModel.prototype._populateGetter = function(data, model, options) {\n  var hasCache = false;\n  var cache;\n\n  return function() {\n    if (!hasCache) {\n      cache = model.findById(data);\n      hasCache = true;\n    }\n\n    return cache;\n  };\n};\n\n/**\n * Returns a getter function for array population.\n *\n * @param {Object} data\n * @param {Model} model\n * @param {Object} options\n * @return {Function}\n * @private\n */\nModel.prototype._populateGetterArray = function(data, model, options) {\n  var Query = model.Query;\n  var hasCache = false;\n  var cache;\n\n  return function() {\n    if (!hasCache) {\n      var arr = [];\n\n      for (var i = 0, len = data.length; i < len; i++) {\n        arr.push(model.findById(data[i]));\n      }\n\n      if (options.match) {\n        cache = new Query(arr).find(options.match, options);\n      } else if (options.skip) {\n        if (options.limit) {\n          arr = arr.slice(options.skip, options.skip + options.limit);\n        } else {\n          arr = arr.slice(options.skip);\n        }\n\n        cache = new Query(arr);\n      } else if (options.limit) {\n        cache = new Query(arr.slice(0, options.limit));\n      } else {\n        cache = new Query(arr);\n      }\n\n      if (options.sort) {\n        cache = cache.sort(options.sort);\n      }\n\n      hasCache = true;\n    }\n\n    return cache;\n  };\n};\n\n/**\n * Populates document references with a compiled stack.\n *\n * @param {Object} data\n * @param {Array} stack\n * @return {Object}\n * @private\n */\nModel.prototype._populate = function(data, stack) {\n  var models = this._database._models;\n  var item, model, path, prop;\n\n  for (var i = 0, len = stack.length; i < len; i++) {\n    item = stack[i];\n    model = models[item.model];\n\n    if (!model) {\n      throw new PopulationError('Model `' + item.model + '` does not exist');\n    }\n\n    path = item.path;\n    prop = getProp(data, path);\n\n    if (isArray(prop)) {\n      setGetter(data, path, this._populateGetterArray(prop, model, item));\n    } else {\n      setGetter(data, path, this._populateGetter(prop, model, item));\n    }\n  }\n\n  return data;\n};\n\n/**\n * Populates document references.\n *\n * @param {String|Object} path\n * @return {Query}\n */\nModel.prototype.populate = function(path) {\n  if (!path) throw new TypeError('path is required');\n\n  var stack = this.schema._parsePopulate(path);\n  var arr = new Array(this.length);\n  var self = this;\n\n  this.forEach(function(item, i) {\n    arr[i] = self._populate(item, stack);\n  });\n\n  return new Query(arr);\n};\n\n/**\n * Imports data.\n *\n * @param {Array} arr\n * @private\n */\nModel.prototype._import = function(arr) {\n  var len = arr.length;\n  var data = this.data;\n  var schema = this.schema;\n  var item;\n\n  for (var i = 0; i < len; i++) {\n    item = arr[i];\n    data[item._id] = schema._parseDatabase(item);\n  }\n\n  this.length = len;\n};\n\n/**\n * Exports data.\n *\n * @return {String}\n * @private\n */\nModel.prototype._export = function() {\n  var arr = new Array(this.length);\n  var schema = this.schema;\n\n  this.forEach(function(item, i) {\n    arr[i] = schema._exportDatabase(item);\n  }, {lean: true});\n\n  return JSON.stringify(arr);\n};\n\nmodule.exports = Model;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/util.js":"'use strict';\n\nvar util = require('util');\n\nexports.inherits = util.inherits;\nexports.isDate = util.isDate;\n\nfunction extractPropKey(key) {\n  return key.split('.');\n}\n\nexports.getProp = function(obj, key) {\n  if (typeof obj !== 'object') throw new TypeError('obj must be an object!');\n  if (!key) throw new TypeError('key is required!');\n\n  var token = extractPropKey(key);\n  var result = obj[token.shift()];\n  var len = token.length;\n\n  if (!len) return result;\n\n  for (var i = 0; i < len; i++) {\n    result = result[token[i]];\n  }\n\n  return result;\n};\n\nexports.setProp = function(obj, key, value) {\n  if (typeof obj !== 'object') throw new TypeError('obj must be an object!');\n  if (!key) throw new TypeError('key is required!');\n\n  var token = extractPropKey(key);\n  var lastKey = token.pop();\n  var len = token.length;\n\n  if (!len) {\n    obj[lastKey] = value;\n    return;\n  }\n\n  var cursor = obj;\n  var name;\n\n  for (var i = 0; i < len; i++) {\n    name = token[i];\n    cursor = cursor[name] = cursor[name] || {};\n  }\n\n  cursor[lastKey] = value;\n};\n\nexports.delProp = function(obj, key) {\n  if (typeof obj !== 'object') throw new TypeError('obj must be an object!');\n  if (!key) throw new TypeError('key is required!');\n\n  var token = extractPropKey(key);\n  var lastKey = token.pop();\n  var len = token.length;\n\n  if (!len) {\n    delete obj[lastKey];\n    return;\n  }\n\n  var cursor = obj;\n  var name;\n\n  for (var i = 0; i < len; i++) {\n    name = token[i];\n\n    if (cursor[name]) {\n      cursor = cursor[name];\n    } else {\n      return;\n    }\n  }\n\n  delete cursor[lastKey];\n};\n\nexports.setGetter = function(obj, key, fn) {\n  if (typeof obj !== 'object') throw new TypeError('obj must be an object!');\n  if (!key) throw new TypeError('key is required!');\n  if (typeof fn !== 'function') throw new TypeError('fn must be a function!');\n\n  var token = extractPropKey(key);\n  var lastKey = token.pop();\n  var len = token.length;\n\n  if (!len) {\n    obj.__defineGetter__(lastKey, fn);\n    return;\n  }\n\n  var cursor = obj;\n  var name;\n\n  for (var i = 0; i < len; i++) {\n    name = token[i];\n    cursor = cursor[name] = cursor[name] || {};\n  }\n\n  cursor.__defineGetter__(lastKey, fn);\n};\n\nexports.arr2obj = function(arr, value) {\n  if (!Array.isArray(arr)) throw new TypeError('arr must be an array!');\n\n  var obj = {};\n  var i = arr.length;\n\n  while (i--) {\n    obj[arr[i]] = value;\n  }\n\n  return obj;\n};\n\nexports.reverse = function(arr) {\n  if (!Array.isArray(arr)) throw new TypeError('arr must be an array!');\n\n  var len = arr.length;\n  var tmp;\n\n  if (!len) return arr;\n\n  for (var left = 0, right = len - 1; left < right; left++, right--) {\n    tmp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = tmp;\n  }\n\n  return arr;\n};\n\nfunction parseArgs(args) {\n  if (typeof args !== 'string') return args;\n\n  var arr = args.split(' ');\n  var result = {};\n  var key;\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    key = arr[i];\n\n    switch (key[0]){\n      case '+':\n        result[key.slice(1)] = 1;\n        break;\n\n      case '-':\n        result[key.slice(1)] = -1;\n        break;\n\n      default:\n        result[key] = 1;\n    }\n  }\n\n  return result;\n}\n\nexports.parseArgs = function(orderby, order) {\n  var result;\n\n  if (order) {\n    result = {};\n    result[orderby] = order;\n  } else if (typeof orderby === 'string') {\n    result = parseArgs(orderby);\n  } else {\n    result = orderby;\n  }\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/document.js":"'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Document constructor.\n *\n * @class\n * @param {object} data\n */\nfunction Document(data) {\n  if (data) {\n    var keys = Object.keys(data);\n    var key;\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      this[key] = data[key];\n    }\n  }\n}\n\n/**\n * Saves the document.\n *\n * @param {function} [callback]\n * @return {Promise}\n */\nDocument.prototype.save = function(callback) {\n  return this._model.save(this, callback);\n};\n\n/**\n * Updates the document.\n *\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nDocument.prototype.update = function(data, callback) {\n  return this._model.updateById(this._id, data, callback);\n};\n\n/**\n * Replaces the document.\n *\n * @param {object} data\n * @param {function} [callback]\n * @return {Promise}\n */\nDocument.prototype.replace = function(data, callback) {\n  return this._model.replaceById(this._id, data, callback);\n};\n\n/**\n * Removes the document.\n *\n * @param {function} [callback]\n * @return {Promise}\n */\nDocument.prototype.remove = function(callback) {\n  return this._model.removeById(this._id, callback);\n};\n\n/**\n * Returns a plain JavaScript object.\n *\n * @return {object}\n */\nDocument.prototype.toObject = function() {\n  var keys = Object.keys(this);\n  var obj = {};\n  var key;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    // Don't deep clone getters in order to avoid \"Maximum call stack size\n    // exceeded\" error\n    obj[key] = isGetter(this, key) ? this[key] : _.cloneDeep(this[key]);\n  }\n\n  return obj;\n};\n\nfunction isGetter(obj, key) {\n  return Object.getOwnPropertyDescriptor(obj, key).get;\n}\n\n/**\n * Returns a string representing the document.\n *\n * @return {String}\n */\nDocument.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Populates document references.\n *\n * @param {String|Object} expr\n * @return {Document}\n */\nDocument.prototype.populate = function(expr) {\n  var stack = this._schema._parsePopulate(expr);\n  return this._model._populate(this, stack);\n};\n\nmodule.exports = Document;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/query.js":"'use strict';\n\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar util = require('./util');\n\nvar reverse = util.reverse;\nvar shuffle = _.shuffle;\nvar parseArgs = util.parseArgs;\n\n/**\n * Query constructor.\n *\n * @class\n * @param {Array} data\n */\nfunction Query(data) {\n  this.data = data;\n  this.length = data.length;\n}\n\n/**\n * Returns the number of elements.\n *\n * @return Number\n */\nQuery.prototype.count = function() {\n  return this.length;\n};\n\nQuery.prototype.size = Query.prototype.count;\n\n/**\n * Iterates over all documents.\n *\n * @param {Function} iterator\n */\nQuery.prototype.forEach = function(iterator) {\n  var data = this.data;\n\n  for (var i = 0, len = this.length; i < len; i++) {\n    iterator(data[i], i);\n  }\n};\n\nQuery.prototype.each = Query.prototype.forEach;\n\n/**\n * Returns an array containing all documents.\n *\n * @return {Array}\n */\nQuery.prototype.toArray = function() {\n  return this.data;\n};\n\n/**\n * Returns the document at the specified index. `num` can be a positive or\n * negative number.\n *\n * @param {Number} i\n * @return {Document|Object}\n */\nQuery.prototype.eq = function(i) {\n  var index = i < 0 ? this.length + i : i;\n  return this.data[index];\n};\n\n/**\n * Returns the first document.\n *\n * @return {Document|Object}\n */\nQuery.prototype.first = function() {\n  return this.eq(0);\n};\n\n/**\n * Returns the last document.\n *\n * @return {Document|Object}\n */\nQuery.prototype.last = function() {\n  return this.eq(-1);\n};\n\n/**\n * Returns the specified range of documents.\n *\n * @param {Number} start\n * @param {Number} [end]\n * @return {Query}\n */\nQuery.prototype.slice = function(start, end) {\n  return new this.constructor(this.data.slice(start, end));\n};\n\n/**\n * Limits the number of documents returned.\n *\n * @param {Number} i\n * @return {Query}\n */\nQuery.prototype.limit = function(i) {\n  return this.slice(0, i);\n};\n\n/**\n * Specifies the number of items to skip.\n *\n * @param {Number} i\n * @return {Query}\n */\nQuery.prototype.skip = function(i) {\n  return this.slice(i);\n};\n\n/**\n * Returns documents in a reversed order.\n *\n * @return {Query}\n */\nQuery.prototype.reverse = function() {\n  return new this.constructor(reverse(this.data.slice()));\n};\n\n/**\n * Returns documents in random order.\n *\n * @return {Query}\n */\nQuery.prototype.shuffle = function() {\n  return new this.constructor(shuffle(this.data.slice()));\n};\n\nQuery.prototype.random = Query.prototype.shuffle;\n\n/**\n * Finds matching documents.\n *\n * @param {Object} query\n * @param {Object} [options]\n *   @param {Number} [options.limit=0] Limits the number of documents returned.\n *   @param {Number} [options.skip=0] Skips the first elements.\n *   @param {Boolean} [options.lean=false] Returns a plain JavaScript object.\n * @return {Query|Array}\n */\nQuery.prototype.find = function(query, options_) {\n  var options = options_ || {};\n  var filter = this._schema._execQuery(query);\n  var data = this.data;\n  var i = 0;\n  var len = this.length;\n  var limit = options.limit || len;\n  var skip = options.skip;\n  var arr = [];\n  var item;\n\n  for (; limit && i < len; i++) {\n    item = data[i];\n\n    if (filter(item)) {\n      if (skip) {\n        skip--;\n      } else {\n        arr.push(item);\n        limit--;\n      }\n    }\n  }\n\n  return options.lean ? arr : new this.constructor(arr);\n};\n\n/**\n * Finds the first matching documents.\n *\n * @param {Object} query\n * @param {Object} [options]\n *   @param {Number} [options.skip=0] Skips the first elements.\n *   @param {Boolean} [options.lean=false] Returns a plain JavaScript object.\n * @return {Document|Object}\n */\nQuery.prototype.findOne = function(query, options_) {\n  var options = options_ || {};\n  options.limit = 1;\n\n  var result = this.find(query, options);\n  return options.lean ? result[0] : result.data[0];\n};\n\n/**\n * Sorts documents.\n *\n * Example:\n *\n * ``` js\n * query.sort('date', -1);\n * query.sort({date: -1, title: 1});\n * query.sort('-date title');\n * ```\n *\n * If the `order` equals to `-1`, `desc` or `descending`, the data will be\n * returned in reversed order.\n *\n * @param {String|Object} orderby\n * @param {String|Number} [order]\n * @return {Query}\n */\nQuery.prototype.sort = function(orderby, order) {\n  var sort = parseArgs(orderby, order);\n  var fn = this._schema._execSort(sort);\n\n  return new this.constructor(this.data.slice().sort(fn));\n};\n\n/**\n * Creates an array of values by iterating each element in the collection.\n *\n * @param {Function} iterator\n * @return {Array}\n */\nQuery.prototype.map = function(iterator) {\n  var len = this.length;\n  var result = new Array(len);\n  var data = this.data;\n\n  for (var i = 0; i < len; i++) {\n    result[i] = iterator(data[i], i);\n  }\n\n  return result;\n};\n\n/**\n * Reduces a collection to a value which is the accumulated result of iterating\n * each element in the collection.\n *\n * @param {Function} iterator\n * @param {*} [initial] By default, the initial value is the first document.\n * @return {*}\n */\nQuery.prototype.reduce = function(iterator, initial) {\n  var len = this.length;\n  var data = this.data;\n  var result, i;\n\n  if (initial === undefined) {\n    i = 1;\n    result = data[0];\n  } else {\n    i = 0;\n    result = initial;\n  }\n\n  for (; i < len; i++) {\n    result = iterator(result, data[i], i);\n  }\n\n  return result;\n};\n\n/**\n * Reduces a collection to a value which is the accumulated result of iterating\n * each element in the collection from right to left.\n *\n * @param {Function} iterator\n * @param {*} [initial] By default, the initial value is the last document.\n * @return {*}\n */\nQuery.prototype.reduceRight = function(iterator, initial) {\n  var len = this.length;\n  var data = this.data;\n  var result, i;\n\n  if (initial === undefined) {\n    i = len - 2;\n    result = data[len - 1];\n  } else {\n    i = len - 1;\n    result = initial;\n  }\n\n  for (; i >= 0; i--) {\n    result = iterator(result, data[i], i);\n  }\n\n  return result;\n};\n\n/**\n * Creates a new array with all documents that pass the test implemented by the\n * provided function.\n *\n * @param {Function} iterator\n * @return {Query}\n */\nQuery.prototype.filter = function(iterator) {\n  var data = this.data;\n  var arr = [];\n  var item;\n\n  for (var i = 0, len = this.length; i < len; i++) {\n    item = data[i];\n    if (iterator(item, i)) arr.push(item);\n  }\n\n  return new this.constructor(arr);\n};\n\n/**\n * Tests whether all documents pass the test implemented by the provided\n * function.\n *\n * @param {Function} iterator\n * @return {Boolean}\n */\nQuery.prototype.every = function(iterator) {\n  var data = this.data;\n\n  for (var i = 0, len = data.length; i < len; i++) {\n    if (!iterator(data[i], i)) return false;\n  }\n\n  return true;\n};\n\n/**\n * Tests whether some documents pass the test implemented by the provided\n * function.\n *\n * @param {Function} iterator\n * @return {Boolean}\n */\nQuery.prototype.some = function(iterator) {\n  var data = this.data;\n\n  for (var i = 0, len = data.length; i < len; i++) {\n    if (iterator(data[i], i)) return true;\n  }\n\n  return false;\n};\n\n/**\n * Update all documents.\n *\n * @param {Object} data\n * @param {Function} [callback]\n * @return {Promise}\n */\nQuery.prototype.update = function(data, callback) {\n  var model = this._model;\n  var stack = this._schema._parseUpdate(data);\n\n  return Promise.mapSeries(this.data, function(item) {\n    return model._updateWithStack(item._id, stack);\n  }).asCallback(callback);\n};\n\n/**\n * Replace all documents.\n *\n * @param {Object} data\n * @param {Function} [callback]\n * @return {Promise}\n */\nQuery.prototype.replace = function(data, callback) {\n  var model = this._model;\n\n  return Promise.map(this.data, function(item) {\n    return model.replaceById(item._id, data);\n  }).asCallback(callback);\n};\n\n/**\n * Remove all documents.\n *\n * @param {Function} [callback]\n * @return {Promise}\n */\nQuery.prototype.remove = function(callback) {\n  var model = this._model;\n\n  return Promise.mapSeries(this.data, function(item) {\n    return model.removeById(item._id);\n  }).asCallback(callback);\n};\n\n/**\n * Populates document references.\n *\n * @param {String|Object} expr\n * @return {Query}\n */\nQuery.prototype.populate = function(expr) {\n  var stack = this._schema._parsePopulate(expr);\n  var data = this.data;\n  var model = this._model;\n\n  for (var i = 0, len = this.length; i < len; i++) {\n    data[i] = model._populate(data[i], stack);\n  }\n\n  return this;\n};\n\nmodule.exports = Query;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/schema.js":"'use strict';\n\nvar SchemaType = require('./schematype');\nvar Types = require('./types');\nvar Promise = require('bluebird');\nvar util = require('./util');\nvar PopulationError = require('./error/population');\nvar isPlainObject = require('is-plain-object');\n\nvar getProp = util.getProp;\nvar setProp = util.setProp;\nvar delProp = util.delProp;\nvar isArray = Array.isArray;\n\nvar builtinTypes = {\n  String: true,\n  Number: true,\n  Boolean: true,\n  Array: true,\n  Object: true,\n  Date: true,\n  Buffer: true\n};\n\n/**\n * Schema constructor.\n *\n * @class\n * @param {Object} schema\n */\nfunction Schema(schema) {\n  this.paths = {};\n  this.statics = {};\n  this.methods = {};\n\n  this.hooks = {\n    pre: {\n      save: [],\n      remove: []\n    },\n    post: {\n      save: [],\n      remove: []\n    }\n  };\n\n  this.stacks = {\n    getter: [],\n    setter: [],\n    import: [],\n    export: []\n  };\n\n  if (schema) {\n    this.add(schema);\n  }\n}\n\n/**\n * Adds paths.\n *\n * @param {Object} schema\n * @param {String} prefix\n */\nSchema.prototype.add = function(schema, prefix_) {\n  var prefix = prefix_ || '';\n  var keys = Object.keys(schema);\n  var len = keys.length;\n  var key, value;\n\n  if (!len) return;\n\n  for (var i = 0; i < len; i++) {\n    key = keys[i];\n    value = schema[key];\n\n    this.path(prefix + key, value);\n  }\n};\n\nfunction getSchemaType(name, options) {\n  var Type = options.type || options;\n  var typeName = Type.name;\n\n  if (builtinTypes[typeName]) {\n    return new Types[typeName](name, options);\n  }\n\n  return new Type(name, options);\n}\n\n/**\n * Gets/Sets a path.\n *\n * @param {String} name\n * @param {*} obj\n * @return {SchemaType}\n */\nSchema.prototype.path = function(name, obj) {\n  if (obj == null) {\n    return this.paths[name];\n  }\n\n  var type;\n  var nested = false;\n\n  if (obj instanceof SchemaType) {\n    type = obj;\n  } else {\n    switch (typeof obj){\n      case 'function':\n        type = getSchemaType(name, {type: obj});\n        break;\n\n      case 'object':\n        if (obj.type) {\n          type = getSchemaType(name, obj);\n        } else if (isArray(obj)) {\n          type = new Types.Array(name, {\n            child: obj.length ? getSchemaType(name, obj[0]) : new SchemaType(name)\n          });\n        } else {\n          type = new Types.Object();\n          nested = Object.keys(obj).length > 0;\n        }\n\n        break;\n\n      default:\n        throw new TypeError('Invalid value for schema path `' + name + '`');\n    }\n  }\n\n  this.paths[name] = type;\n  this._updateStack(name, type);\n\n  if (nested) this.add(obj, name + '.');\n};\n\n/**\n * Updates cache stacks.\n *\n * @param {String} name\n * @param {SchemaType} type\n * @private\n */\nSchema.prototype._updateStack = function(name, type) {\n  var stacks = this.stacks;\n\n  stacks.getter.push(function(data) {\n    var value = getProp(data, name);\n    var result = type.cast(value, data);\n\n    if (result !== undefined) {\n      setProp(data, name, result);\n    }\n  });\n\n  stacks.setter.push(function(data) {\n    var value = getProp(data, name);\n    var result = type.validate(value, data);\n\n    if (result !== undefined) {\n      setProp(data, name, result);\n    } else {\n      delProp(data, name);\n    }\n  });\n\n  stacks.import.push(function(data) {\n    var value = getProp(data, name);\n    var result = type.parse(value, data);\n\n    if (result !== undefined) {\n      setProp(data, name, result);\n    }\n  });\n\n  stacks.export.push(function(data) {\n    var value = getProp(data, name);\n    var result = type.value(value, data);\n\n    if (result !== undefined) {\n      setProp(data, name, result);\n    } else {\n      delProp(data, name);\n    }\n  });\n};\n\n/**\n * Adds a virtual path.\n *\n * @param {String} name\n * @param {Function} [getter]\n * @return {SchemaType.Virtual}\n */\nSchema.prototype.virtual = function(name, getter) {\n  var virtual = new Types.Virtual(name, {});\n  if (getter) virtual.get(getter);\n\n  this.path(name, virtual);\n\n  return virtual;\n};\n\nfunction checkHookType(type) {\n  if (type !== 'save' && type !== 'remove') {\n    throw new TypeError('Hook type must be `save` or `remove`!');\n  }\n}\n\nfunction hookWrapper(fn) {\n  if (fn.length > 1) {\n    return Promise.promisify(fn);\n  }\n\n  return Promise.method(fn);\n}\n\n/**\n * Adds a pre-hook.\n *\n * @param {String} type Hook type. One of `save` or `remove`.\n * @param {Function} fn\n */\nSchema.prototype.pre = function(type, fn) {\n  checkHookType(type);\n  if (typeof fn !== 'function') throw new TypeError('Hook must be a function!');\n\n  this.hooks.pre[type].push(hookWrapper(fn));\n};\n\n/**\n * Adds a post-hook.\n *\n * @param {String} type Hook type. One of `save` or `remove`.\n * @param {Function} fn\n */\nSchema.prototype.post = function(type, fn) {\n  checkHookType(type);\n  if (typeof fn !== 'function') throw new TypeError('Hook must be a function!');\n\n  this.hooks.post[type].push(hookWrapper(fn));\n};\n\n/**\n * Adds a instance method.\n *\n * @param {String} name\n * @param {Function} fn\n */\nSchema.prototype.method = function(name, fn) {\n  if (!name) throw new TypeError('Method name is required!');\n\n  if (typeof fn !== 'function') {\n    throw new TypeError('Instance method must be a function!');\n  }\n\n  this.methods[name] = fn;\n};\n\n/**\n * Adds a static method.\n *\n * @param {String} name\n * @param {Function} fn\n */\nSchema.prototype.static = function(name, fn) {\n  if (!name) throw new TypeError('Method name is required!');\n\n  if (typeof fn !== 'function') {\n    throw new TypeError('Static method must be a function!');\n  }\n\n  this.statics[name] = fn;\n};\n\n/**\n * Apply getters.\n *\n * @param {Object} data\n * @return {*}\n * @private\n */\nSchema.prototype._applyGetters = function(data) {\n  var stack = this.stacks.getter;\n\n  for (var i = 0, len = stack.length; i < len; i++) {\n    stack[i](data);\n  }\n};\n\n/**\n * Apply setters.\n *\n * @param {Object} data\n * @return {*}\n * @private\n */\nSchema.prototype._applySetters = function(data) {\n  var stack = this.stacks.setter;\n\n  for (var i = 0, len = stack.length; i < len; i++) {\n    stack[i](data);\n  }\n};\n\n/**\n * Parses database.\n *\n * @param {Object} data\n * @return {Object}\n * @private\n */\nSchema.prototype._parseDatabase = function(data) {\n  var stack = this.stacks.import;\n\n  for (var i = 0, len = stack.length; i < len; i++) {\n    stack[i](data);\n  }\n\n  return data;\n};\n\n/**\n * Exports database.\n *\n * @param {Object} data\n * @return {Object}\n * @private\n */\nSchema.prototype._exportDatabase = function(data) {\n  var stack = this.stacks.export;\n\n  for (var i = 0, len = stack.length; i < len; i++) {\n    stack[i](data);\n  }\n\n  return data;\n};\n\nfunction updateStackNormal(key, update) {\n  return function(data) {\n    setProp(data, key, update);\n  };\n}\n\nfunction updateStackOperator(path_, ukey, key, update) {\n  var path = path_ || new SchemaType(key);\n\n  return function(data) {\n    var result = path[ukey](getProp(data, key), update, data);\n    setProp(data, key, result);\n  };\n}\n\n/**\n * Parses updating expressions and returns a stack.\n *\n * @param {Object} updates\n * @param {String} [prefix]\n * @return {Array}\n * @private\n */\nSchema.prototype._parseUpdate = function(updates, prefix_) {\n  var prefix = prefix_ || '';\n  var paths = this.paths;\n  var stack = [];\n  var keys = Object.keys(updates);\n  var key, update, ukey, name, path, fields, field, j, fieldLen, prefixNoDot;\n\n  if (prefix) {\n    prefixNoDot = prefix.substring(0, prefix.length - 1);\n    path = paths[prefixNoDot];\n  }\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    update = updates[key];\n    name = prefix + key;\n\n    // Update operators\n    if (key[0] === '$') {\n      ukey = 'u' + key;\n\n      // First-class update operators\n      if (prefix) {\n        stack.push(updateStackOperator(path, ukey, prefixNoDot, update));\n      } else { // Inline update operators\n        fields = Object.keys(update);\n        fieldLen = fields.length;\n\n        for (j = 0; j < fieldLen; j++) {\n          field = fields[i];\n          stack.push(\n            updateStackOperator(paths[field], ukey, field, update[field]));\n        }\n      }\n    } else if (isPlainObject(update)) {\n      stack = stack.concat(this._parseUpdate(update, name + '.'));\n    } else {\n      stack.push(updateStackNormal(name, update));\n    }\n  }\n\n  return stack;\n};\n\nfunction queryStackNormal(path_, key, query) {\n  var path = path_ || new SchemaType(key);\n\n  return function(data) {\n    return path.match(getProp(data, key), query, data);\n  };\n}\n\nfunction queryStackOperator(path_, qkey, key, query) {\n  var path = path_ || new SchemaType(key);\n\n  return function(data) {\n    return path[qkey](getProp(data, key), query, data);\n  };\n}\n\nfunction execQueryStack(stack) {\n  var len = stack.length;\n  var i;\n\n  return function(data) {\n    for (i = 0; i < len; i++) {\n      if (!stack[i](data)) return false;\n    }\n\n    return true;\n  };\n}\n\nfunction $or(stack) {\n  var len = stack.length;\n  var i;\n\n  return function(data) {\n    for (i = 0; i < len; i++) {\n      if (stack[i](data)) return true;\n    }\n\n    return false;\n  };\n}\n\nfunction $nor(stack) {\n  var len = stack.length;\n  var i;\n\n  return function(data) {\n    for (i = 0; i < len; i++) {\n      if (stack[i](data)) return false;\n    }\n\n    return true;\n  };\n}\n\nfunction $not(stack) {\n  var fn = execQueryStack(stack);\n\n  return function(data) {\n    return !fn(data);\n  };\n}\n\nfunction $where(fn) {\n  return function(data) {\n    return fn.call(data);\n  };\n}\n\n/**\n * Parses array of query expressions and returns a stack.\n *\n * @param {Array} arr\n * @return {Array}\n * @private\n */\nSchema.prototype._parseQueryArray = function(arr) {\n  var stack = [];\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    stack.push(execQueryStack(this._parseQuery(arr[i])));\n  }\n\n  return stack;\n};\n\n/**\n * Parses normal query expressions and returns a stack.\n *\n * @param {Array} queries\n * @param {String} [prefix]\n * @return {Array}\n * @private\n */\nSchema.prototype._parseNormalQuery = function(queries, prefix_) {\n  var prefix = prefix_ || '';\n  var paths = this.paths;\n  var stack = [];\n  var keys = Object.keys(queries);\n  var key, query, name, path, prefixNoDot;\n\n  if (prefix) {\n    prefixNoDot = prefix.substring(0, prefix.length - 1);\n    path = paths[prefixNoDot];\n  }\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    query = queries[key];\n    name = prefix + key;\n\n    if (key[0] === '$') {\n      stack.push(queryStackOperator(path, 'q' + key, prefixNoDot, query));\n    } else if (isPlainObject(query)) {\n      stack = stack.concat(this._parseNormalQuery(query, name + '.'));\n    } else {\n      stack.push(queryStackNormal(paths[name], name, query));\n    }\n  }\n\n  return stack;\n};\n\n/**\n * Parses query expressions and returns a stack.\n *\n * @param {Array} queries\n * @return {Array}\n * @private\n */\nSchema.prototype._parseQuery = function(queries) {\n  var stack = [];\n  var paths = this.paths;\n  var keys = Object.keys(queries);\n  var key, query;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    query = queries[key];\n\n    switch (key){\n      case '$and':\n        stack = stack.concat(this._parseQueryArray(query));\n        break;\n\n      case '$or':\n        stack.push($or(this._parseQueryArray(query)));\n        break;\n\n      case '$nor':\n        stack.push($nor(this._parseQueryArray(query)));\n        break;\n\n      case '$not':\n        stack.push($not(this._parseQuery(query)));\n        break;\n\n      case '$where':\n        stack.push($where(query));\n        break;\n\n      default:\n        if (isPlainObject(query)) {\n          stack = stack.concat(this._parseNormalQuery(query, key + '.'));\n        } else {\n          stack.push(queryStackNormal(paths[key], key, query));\n        }\n    }\n  }\n\n  return stack;\n};\n\n/**\n * Returns a function for querying.\n *\n * @param {Object} query\n * @return {Function}\n * @private\n */\nSchema.prototype._execQuery = function(query) {\n  var stack = this._parseQuery(query);\n  return execQueryStack(stack);\n};\n\nfunction execSortStack(stack) {\n  var len = stack.length;\n  var i;\n\n  return function(a, b) {\n    var result;\n\n    for (i = 0; i < len; i++) {\n      result = stack[i](a, b);\n      if (result) break;\n    }\n\n    return result;\n  };\n}\n\nfunction sortStack(path_, key, sort) {\n  var path = path_ || new SchemaType(key);\n  var descending = sort === 'desc' || sort === -1;\n\n  return function(a, b) {\n    var result = path.compare(getProp(a, key), getProp(b, key));\n    return descending && result ? result * -1 : result;\n  };\n}\n\n/**\n * Parses sorting expressions and returns a stack.\n *\n * @param {Object} sorts\n * @param {String} [prefix]\n * @return {Array}\n * @private\n */\nSchema.prototype._parseSort = function(sorts, prefix_) {\n  var prefix = prefix_ || '';\n  var paths = this.paths;\n  var stack = [];\n  var keys = Object.keys(sorts);\n  var key, sort, name;\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    key = keys[i];\n    sort = sorts[key];\n    name = prefix + key;\n\n    if (typeof sort === 'object') {\n      stack = stack.concat(this._parseSort(sort, name + '.'));\n    } else {\n      stack.push(sortStack(paths[name], name, sort));\n    }\n  }\n\n  return stack;\n};\n\n/**\n * Returns a function for sorting.\n *\n * @param {Object} sorts\n * @return {Function}\n * @private\n */\nSchema.prototype._execSort = function(sorts) {\n  var stack = this._parseSort(sorts);\n  return execSortStack(stack);\n};\n\n/**\n * Parses population expression and returns a stack.\n *\n * @param {String|Object} expr\n * @return {Array}\n * @private\n */\nSchema.prototype._parsePopulate = function(expr) {\n  var paths = this.paths;\n  var arr, i, len, item, path, key, ref;\n\n  if (typeof expr === 'string') {\n    var split = expr.split(' ');\n    arr = [];\n\n    for (i = 0, len = split.length; i < len; i++) {\n      arr.push({\n        path: split[i]\n      });\n    }\n  } else if (isArray(expr)) {\n    for (i = 0, len = expr.length; i < len; i++) {\n      item = expr[i];\n\n      if (typeof item === 'string') {\n        arr.push({\n          path: item\n        });\n      } else {\n        arr.push(item);\n      }\n    }\n  } else {\n    arr = [expr];\n  }\n\n  for (i = 0, len = arr.length; i < len; i++) {\n    item = arr[i];\n    key = item.path;\n\n    if (!key) {\n      throw new PopulationError('path is required');\n    }\n\n    if (!item.model) {\n      path = paths[key];\n      ref = path.child ? path.child.options.ref : path.options.ref;\n\n      if (ref) {\n        item.model = ref;\n      } else {\n        throw new PopulationError('model is required');\n      }\n    }\n  }\n\n  return arr;\n};\n\nSchema.Types = Schema.prototype.Types = Types;\n\nmodule.exports = Schema;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/schematype.js":"'use strict';\n\nvar _ = require('lodash');\nvar util = require('./util');\nvar ValidationError = require('./error/validation');\n\nvar includes = _.includes;\nvar setProp = util.setProp;\nvar assign = _.assign;\n\n/**\n * SchemaType constructor.\n *\n * This is the basic schema type. All schema types should inherit from this\n * class. For example:\n *\n * ``` js\n * var SchemaTypeCustom = function(name, options){\n *   SchemaType.call(this, name, options);\n * };\n *\n * require('util').inherits(SchemaTypeCustom, SchemaType);\n * ```\n *\n * **Query operators**\n *\n * To add a query operator, defines a method whose name is started with `q$`.\n * For example:\n *\n * ``` js\n * SchemaTypeCustom.q$foo = function(value, query, data){\n *   // ...\n * };\n * ```\n *\n * The `value` parameter is the value of specified field; the `query` parameter\n * is the value passed to the query operator; the `data` parameter is the\n * complete data.\n *\n * The return value must be a boolean indicating whether the data passed.\n *\n * **Update operators**\n *\n * To add a update operator, defines a method whose name is started with `u$`.\n * For example:\n *\n * ``` js\n * SchemaTypeCustom.u$foo = function(value, update, data){\n *   // ...\n * };\n *\n * The `value` parameter is the value of specified field; the `update` parameter\n * is the value passed to the update operator; the `data` parameter is the\n * complete data.\n *\n * The return value will replace the original data.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {*} [options.default]\n */\nfunction SchemaType(name, options) {\n  this.name = name || '';\n\n  this.options = assign({\n    required: false\n  }, options);\n\n  var default_ = this.options.default;\n\n  if (typeof default_ === 'function') {\n    this.default = default_;\n  } else {\n    this.default = function() {\n      return default_;\n    };\n  }\n}\n\n/**\n * Casts data. This function is used by getters to cast an object to document\n * instances. If the value is null, the default value will be returned.\n *\n * @param {*} value\n * @param {Object} data\n * @return {*}\n */\nSchemaType.prototype.cast = function(value, data) {\n  if (value == null) {\n    return this.default();\n  }\n\n  return value;\n};\n\n/**\n * Validates data. This function is used by setters.\n *\n * @param {*} value\n * @param {Object} data\n * @return {*|Error}\n */\nSchemaType.prototype.validate = function(value, data) {\n  if (this.options.required && value == null) {\n    throw new ValidationError('`' + this.name + '` is required!');\n  }\n\n  return value;\n};\n\n/**\n * Compares data. This function is used when sorting.\n *\n * @param {*} a\n * @param {*} b\n * @return {Number}\n */\nSchemaType.prototype.compare = function(a, b) {\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  }\n\n  return 0;\n};\n\n/**\n * Parses data. This function is used when restoring data from database files.\n *\n * @param {*} value\n * @param {Object} data\n * @return {*}\n */\nSchemaType.prototype.parse = function(value, data) {\n  return value;\n};\n\n/**\n * Transforms value. This function is used when saving data to database files.\n *\n * @param {*} value\n * @param {Object} data\n * @return {*}\n */\nSchemaType.prototype.value = function(value, data) {\n  return value;\n};\n\n/**\n * Checks the equality of data.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.match = function(value, query, data) {\n  return value === query;\n};\n\n/**\n * Checks the existance of data.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$exist = function(value, query, data) {\n  return (value != null) === query;\n};\n\nSchemaType.prototype.q$exists = SchemaType.prototype.q$exist;\n\n/**\n * Checks the equality of data. Returns true if the value doesn't match.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {boolean}\n */\nSchemaType.prototype.q$ne = function(value, query, data) {\n  return !this.match(value, query, data);\n};\n\n/**\n * Checks whether `value` is less than (i.e. <) the `query`.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$lt = function(value, query, data) {\n  return value < query;\n};\n\n/**\n * Checks whether `value` is less than or equal to (i.e. <=) the `query`.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$lte = function(value, query, data) {\n  return value <= query;\n};\n\nSchemaType.prototype.q$max = SchemaType.prototype.q$lte;\n\n/**\n * Checks whether `value` is greater than (i.e. >) the `query`.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$gt = function(value, query, data) {\n  return value > query;\n};\n\n/**\n * Checks whether `value` is greater than or equal to (i.e. >=) the `query`.\n *\n * @param {*} value\n * @param {*} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$gte = function(value, query, data) {\n  return value >= query;\n};\n\nSchemaType.prototype.q$min = SchemaType.prototype.q$gte;\n\n/**\n * Checks whether `value` is equal to one of elements in `query`.\n *\n * @param {*} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$in = function(value, query, data) {\n  return includes(query, value);\n};\n\n/**\n * Checks whether `value` is not equal to any elements in `query`.\n *\n * @param {*} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaType.prototype.q$nin = function(value, query, data) {\n  return !includes(query, value);\n};\n\n/**\n * Sets the value.\n *\n * @param {*} value\n * @param {*} update\n * @param {Object} data\n * @return {*}\n */\nSchemaType.prototype.u$set = function(value, update, data) {\n  return update;\n};\n\n/**\n * Unsets the value.\n *\n * @param {*} value\n * @param {*} update\n * @param {Object} data\n * @return {*}\n */\nSchemaType.prototype.u$unset = function(value, update, data) {\n  return update ? undefined : value;\n};\n\n/**\n * Renames a field.\n *\n * @param {*} value\n * @param {*} update\n * @param {Object} data\n * @return {*}\n */\nSchemaType.prototype.u$rename = function(value, update, data) {\n  if (value !== undefined) setProp(data, update, value);\n  return undefined;\n};\n\nmodule.exports = SchemaType;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/error/validation.js":"'use strict';\n\nvar util = require('../util');\nvar WarehouseError = require('../error');\n\n/**\n * ValidationError constructor\n *\n * @class\n * @param {String} msg\n * @extends WarehouseError\n */\nfunction ValidationError(msg) {\n  WarehouseError.call(this);\n\n  this.name = 'ValidationError';\n  this.message = msg;\n}\n\nutil.inherits(ValidationError, WarehouseError);\n\nmodule.exports = ValidationError;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/error.js":"'use strict';\n\nvar util = require('./util');\n\n/**\n * WarehouseError constructor\n *\n * @class\n * @param {String} msg\n * @param {String} code\n * @extends Error\n */\nfunction WarehouseError(msg, code) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.name = 'WarehouseError';\n  this.message = msg;\n  this.code = code;\n}\n\nutil.inherits(WarehouseError, Error);\n\nWarehouseError.ID_EXIST = 'ID_EXIST';\nWarehouseError.ID_NOT_EXIST = 'ID_NOT_EXIST';\nWarehouseError.ID_UNDEFINED = 'ID_UNDEFINED';\n\nmodule.exports = WarehouseError;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/index.js":"'use strict';\n\nexports.Mixed = require('../schematype');\nexports.String = require('./string');\nexports.Number = require('./number');\nexports.Boolean = require('./boolean');\nexports.Array = require('./array');\nexports.Object = require('./object');\nexports.Date = require('./date');\nexports.Virtual = require('./virtual');\nexports.CUID = require('./cuid');\nexports.Enum = require('./enum');\nexports.Integer = require('./integer');\nexports.Buffer = require('./buffer');\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/string.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar ValidationError = require('../error/validation');\n\n/**\n * String schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {String|Function} [options.default]\n * @extends {SchemaType}\n */\nfunction SchemaTypeString(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeString, SchemaType);\n\n/**\n * Casts a string.\n *\n * @param {*} value\n * @param {Object} data\n * @return {String}\n */\nSchemaTypeString.prototype.cast = function(value_, data) {\n  var value = SchemaType.prototype.cast.call(this, value_, data);\n\n  if (value == null || typeof value === 'string') return value;\n  if (typeof value.toString === 'function') return value.toString();\n};\n\n/**\n * Validates a string.\n *\n * @param {*} value\n * @param {Object} data\n * @return {String|Error}\n */\nSchemaTypeString.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n\n  if (value !== undefined && typeof value !== 'string') {\n    throw new ValidationError('`' + value + '` is not a string!');\n  }\n\n  return value;\n};\n\n/**\n * Checks the equality of data.\n *\n * @param {*} value\n * @param {String|RegExp} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeString.prototype.match = function(value, query, data) {\n  if (!value || !query) {\n    return value === query;\n  }\n\n  if (typeof query.test === 'function') {\n    return query.test(value);\n  }\n\n  return value === query;\n};\n\n/**\n * Checks whether a string is equal to one of elements in `query`.\n *\n * @param {String} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeString.prototype.q$in = function(value, query, data) {\n  for (var i = 0, len = query.length; i < len; i++) {\n    if (this.match(value, query[i], data)) return true;\n  }\n\n  return false;\n};\n\n/**\n * Checks whether a string is not equal to any elements in `query`.\n *\n * @param {String} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeString.prototype.q$nin = function(value, query, data) {\n  return !this.q$in(value, query, data);\n};\n\n/**\n * Checks length of a string.\n *\n * @param {String} value\n * @param {Number} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeString.prototype.q$length = function(value, query, data) {\n  return (value ? value.length : 0) === query;\n};\n\nmodule.exports = SchemaTypeString;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/number.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar ValidationError = require('../error/validation');\n\n/**\n * Number schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} options\n *   @param {Boolean} [options.required=false]\n *   @param {Number|Function} [options.default]\n * @extends {SchemaType}\n */\nfunction SchemaTypeNumber(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeNumber, SchemaType);\n\n/**\n * Casts a number.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.cast = function(value_, data) {\n  var value = SchemaType.prototype.cast.call(this, value_, data);\n\n  if (value == null || typeof value === 'number') return value;\n\n  return +value;\n};\n\n/**\n * Validates a number.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Number|Error}\n */\nSchemaTypeNumber.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n\n  if (value !== undefined && (typeof value !== 'number' || isNaN(value))) {\n    throw new ValidationError('`' + value + '` is not a number!');\n  }\n\n  return value;\n};\n\n/**\n * Adds value to a number.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$inc = function(value, update, data) {\n  return value ? value + update : update;\n};\n\n/**\n * Subtracts value from a number.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$dec = function(value, update, data) {\n  return value ? value - update : -update;\n};\n\n/**\n * Multiplies value to a number.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$mul = function(value, update, data) {\n  return value ? value * update : 0;\n};\n\n/**\n * Divides a number by a value.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$div = function(value, update, data) {\n  return value ? value / update : 0;\n};\n\n/**\n * Divides a number by a value and returns the remainder.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$mod = function(value, update, data) {\n  return value ? value % update : 0;\n};\n\n/**\n * Updates a number if the value is greater than the current value.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$max = function(value, update, data) {\n  return update > value ? update : value;\n};\n\n/**\n * Updates a number if the value is less than the current value.\n *\n * @param {Number} value\n * @param {Number} update\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeNumber.prototype.u$min = function(value, update, data) {\n  return update < value ? update : value;\n};\n\nmodule.exports = SchemaTypeNumber;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/boolean.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar ValidationError = require('../error/validation');\n\n/**\n * Boolean schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {Boolean|Function} [options.default]\n * @extends {SchemaType}\n */\nfunction SchemaTypeBoolean(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeBoolean, SchemaType);\n\n/**\n * Casts a boolean.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeBoolean.prototype.cast = function(value_, data) {\n  var value = SchemaType.prototype.cast.call(this, value_, data);\n\n  if (value === 'false' || value === '0') return false;\n\n  return Boolean(value);\n};\n\n/**\n * Validates a boolean.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Boolean|Error}\n */\nSchemaTypeBoolean.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n\n  if (value != null && typeof value !== 'boolean') {\n    throw new ValidationError('`' + value + '` is not a boolean!');\n  }\n\n  return value;\n};\n\n/**\n * Parses data and transform them into boolean values.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeBoolean.prototype.parse = function(value, data) {\n  return Boolean(value);\n};\n\n/**\n * Transforms data into number to compress the size of database files.\n *\n * @param {Boolean} value\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeBoolean.prototype.value = function(value, data) {\n  return +value;\n};\n\nmodule.exports = SchemaTypeBoolean;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/array.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar _ = require('lodash');\nvar ValidationError = require('../error/validation');\n\nvar extend = _.assign;\nvar includes = _.includes;\nvar isArray = Array.isArray;\n\n/**\n * Array schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {Array|Function} [options.default=[]]\n *   @param {SchemaType} [options.child]\n * @extends {SchemaType}\n */\nfunction SchemaTypeArray(name, options) {\n  SchemaType.call(this, name, extend({\n    default: []\n  }, options));\n\n  this.child = this.options.child || new SchemaType(name);\n}\n\nutil.inherits(SchemaTypeArray, SchemaType);\n\n/**\n * Casts an array and its child elements.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.cast = function(value_, data) {\n  var value = SchemaType.prototype.cast.call(this, value_, data);\n  if (value == null) return value;\n\n  if (!isArray(value)) value = [value];\n  if (!value.length) return value;\n\n  var child = this.child;\n\n  for (var i = 0, len = value.length; i < len; i++) {\n    value[i] = child.cast(value[i], data);\n  }\n\n  return value;\n};\n\n/**\n * Validates an array and its child elements.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Array|Error}\n */\nSchemaTypeArray.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n\n  if (!isArray(value)) {\n    throw new ValidationError('`' + value + '` is not an array!');\n  }\n\n  if (!value.length) return value;\n\n  var child = this.child;\n\n  for (var i = 0, len = value.length; i < len; i++) {\n    value[i] = child.validate(value[i], data);\n  }\n\n  return value;\n};\n\n/**\n * Compares an array by its child elements and the size of the array.\n *\n * @param {Array} a\n * @param {Array} b\n * @return {Number}\n */\nSchemaTypeArray.prototype.compare = function(a, b) {\n  if (a) {\n    if (!b) return 1;\n  } else {\n    return b ? -1 : 0;\n  }\n\n  var lenA = a.length;\n  var lenB = b.length;\n  var child = this.child;\n  var result;\n\n  for (var i = 0, len = Math.min(lenA, lenB); i < len; i++) {\n    result = child.compare(a[i], b[i]);\n    if (result !== 0) return result;\n  }\n\n  // Compare by length\n  return lenA - lenB;\n};\n\n/**\n * Parses data.\n *\n * @param {Array} value\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.parse = function(value, data) {\n  if (!value) return value;\n\n  var len = value.length;\n  if (!len) return [];\n\n  var result = new Array(len);\n  var child = this.child;\n\n  for (var i = 0; i < len; i++) {\n    result[i] = child.parse(value[i], data);\n  }\n\n  return result;\n};\n\n/**\n * Transforms data.\n *\n * @param {Array} value\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.value = function(value, data) {\n  if (!value) return value;\n\n  var len = value.length;\n  if (!len) return [];\n\n  var result = new Array(len);\n  var child = this.child;\n\n  for (var i = 0; i < len; i++) {\n    result[i] = child.value(value[i], data);\n  }\n\n  return result;\n};\n\n/**\n * Checks the equality of an array.\n *\n * @param {Array} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeArray.prototype.match = function(value, query, data) {\n  if (!value || !query) {\n    return value === query;\n  }\n\n  var lenA = value.length;\n  var lenB = query.length;\n\n  if (lenA !== lenB) return false;\n\n  var child = this.child;\n\n  for (var i = 0; i < lenA; i++) {\n    if (!child.match(value[i], query[i], data)) return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks whether the number of elements in an array is equal to `query`.\n *\n * @param {Array} value\n * @param {Number} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeArray.prototype.q$size = function(value, query, data) {\n  return (value ? value.length : 0) === query;\n};\n\nSchemaTypeArray.prototype.q$length = SchemaTypeArray.prototype.q$size;\n\n/**\n * Checks whether an array contains one of elements in `query`.\n *\n * @param {Array} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeArray.prototype.q$in = function(value, query, data) {\n  if (!value) return false;\n\n  for (var i = 0, len = query.length; i < len; i++) {\n    if (includes(value, query[i])) return true;\n  }\n\n  return false;\n};\n\n/**\n * Checks whether an array does not contain in any elements in `query`.\n *\n * @param {Array} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeArray.prototype.q$nin = function(value, query, data) {\n  if (!value) return true;\n\n  for (var i = 0, len = query.length; i < len; i++) {\n    if (includes(value, query[i])) return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks whether an array contains all elements in `query`.\n *\n * @param {Array} value\n * @param {Array} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeArray.prototype.q$all = function(value, query, data) {\n  if (!value) return false;\n\n  for (var i = 0, len = query.length; i < len; i++) {\n    if (!includes(value, query[i])) return false;\n  }\n\n  return true;\n};\n\n/**\n * Add elements to an array.\n *\n * @param {Array} value\n * @param {*} update\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.u$push = function(value, update, data) {\n  if (isArray(update)) {\n    return value ? value.concat(update) : update;\n  }\n\n  if (value) {\n    value.push(update);\n    return value;\n  }\n\n  return [update];\n};\n\nSchemaTypeArray.prototype.u$append = SchemaTypeArray.prototype.u$push;\n\n/**\n * Add elements in front of an array.\n *\n * @param {Array} value\n * @param {*} update\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.u$unshift = function(value, update, data) {\n  if (isArray(update)) {\n    return value ? update.concat(value) : update;\n  }\n\n  if (value) {\n    value.unshift(update);\n    return value;\n  }\n\n  return [update];\n};\n\nSchemaTypeArray.prototype.u$prepend = SchemaTypeArray.prototype.u$unshift;\n\n/**\n * Removes elements from an array.\n *\n * @param {Array} value\n * @param {*} update\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.u$pull = function(value, update, data) {\n  if (!value) return value;\n\n  if (isArray(update)) {\n    return _.difference(value, update);\n  }\n\n  return _.without(value, update);\n};\n\n/**\n * Removes the first element from an array.\n *\n * @param {Array} value\n * @param {Number|Boolean} update\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.u$shift = function(value, update, data) {\n  if (!value || !update) return value;\n\n  if (update === true) {\n    return value.slice(1);\n  } else if (update > 0) {\n    return value.slice(update);\n  }\n\n  return value.slice(0, value.length + update);\n};\n\n/**\n * Removes the last element from an array.\n *\n * @param {Array} value\n * @param {Number|Boolean} update\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.u$pop = function(value, update, data) {\n  if (!value || !update) return value;\n\n  var length = value.length;\n\n  if (update === true) {\n    return value.slice(0, length - 1);\n  } else if (update > 0) {\n    return value.slice(0, length - update);\n  }\n\n  return value.slice(-update, length);\n};\n\n/**\n * Add elements to an array only if the value is not already in the array.\n *\n * @param {Array} value\n * @param {*} update\n * @param {Object} data\n * @return {Array}\n */\nSchemaTypeArray.prototype.u$addToSet = function(value, update, data) {\n  if (isArray(update)) {\n    if (!value) return update;\n\n    var item;\n\n    for (var i = 0, len = update.length; i < len; i++) {\n      item = update[i];\n      if (!includes(value, item)) value.push(item);\n    }\n\n    return value;\n  }\n\n  if (!value) return [update];\n\n  if (!includes(value, update)) {\n    value.push(update);\n  }\n\n  return value;\n};\n\nmodule.exports = SchemaTypeArray;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/object.js":"'use strict';\n\nvar _ = require('lodash');\nvar SchemaType = require('../schematype');\nvar util = require('../util');\n\nvar extend = _.assign;\n\n/**\n * Object schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {Object|Function} [options.default={}]\n * @extends {SchemaType}\n */\nfunction SchemaTypeObject(name, options) {\n  SchemaType.call(this, name, extend({\n    default: {}\n  }, options));\n}\n\nutil.inherits(SchemaTypeObject, SchemaType);\n\nmodule.exports = SchemaTypeObject;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/date.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar ValidationError = require('../error/validation');\n\n/**\n * Date schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {Date|Number|Function} [options.default]\n * @extends {SchemaType}\n */\nfunction SchemaTypeDate(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeDate, SchemaType);\n\n/**\n * Casts data.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Date}\n */\nSchemaTypeDate.prototype.cast = function(value_, data) {\n  var value = SchemaType.prototype.cast.call(this, value_, data);\n\n  if (value == null || util.isDate(value)) return value;\n\n  return new Date(value);\n};\n\n/**\n * Validates data.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Date|Error}\n */\nSchemaTypeDate.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n\n  if (value != null && (!util.isDate(value) || isNaN(value.getTime()))) {\n    throw new ValidationError('`' + value + '` is not a valid date!');\n  }\n\n  return value;\n};\n\n/**\n * Checks the equality of data.\n *\n * @param {Date} value\n * @param {Date} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeDate.prototype.match = function(value, query, data) {\n  if (!value || !query) {\n    return value === query;\n  }\n\n  return value.getTime() === query.getTime();\n};\n\n/**\n * Compares between two dates.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Number}\n */\nSchemaTypeDate.prototype.compare = function(a, b) {\n  if (a) {\n    return b ? a - b : 1;\n  }\n\n  return b ? -1 : 0;\n};\n\n/**\n * Parses data and transforms it into a date object.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Date}\n */\nSchemaTypeDate.prototype.parse = function(value, data) {\n  if (value) return new Date(value);\n};\n\n/**\n * Transforms a date object to a string.\n *\n * @param {Date} value\n * @param {Object} data\n * @return {String}\n */\nSchemaTypeDate.prototype.value = function(value, data) {\n  return value ? value.toISOString() : value;\n};\n\n/**\n * Finds data by its date.\n *\n * @param {Date} value\n * @param {Number} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeDate.prototype.q$day = function(value, query, data) {\n  return value ? value.getDate() === query : false;\n};\n\n/**\n * Finds data by its month. (Start from 0)\n *\n * @param {Date} value\n * @param {Number} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeDate.prototype.q$month = function(value, query, data) {\n  return value ? value.getMonth() === query : false;\n};\n\n/**\n * Finds data by its year. (4-digit)\n *\n * @param {Date} value\n * @param {Number} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeDate.prototype.q$year = function(value, query, data) {\n  return value ? value.getFullYear() === query : false;\n};\n\n/**\n * Adds milliseconds to date.\n *\n * @param {Date} value\n * @param {Number} update\n * @param {Object} data\n * @return {Date}\n */\nSchemaTypeDate.prototype.u$inc = function(value, update, data) {\n  if (value) return new Date(value.getTime() + update);\n};\n\n/**\n * Subtracts milliseconds from date.\n *\n * @param {Date} value\n * @param {Number} update\n * @param {Object} data\n * @return {Date}\n */\nSchemaTypeDate.prototype.u$dec = function(value, update, data) {\n  if (value) return new Date(value.getTime() - update);\n};\n\nmodule.exports = SchemaTypeDate;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/virtual.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\n\nvar setGetter = util.setGetter;\n\n/**\n * Virtual schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n * @extends {SchemaType}\n */\nfunction SchemaTypeVirtual(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeVirtual, SchemaType);\n\n/**\n * Add a getter.\n *\n * @param {Function} fn\n * @chainable\n */\nSchemaTypeVirtual.prototype.get = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('Getter must be a function!');\n  }\n\n  this.getter = fn;\n\n  return this;\n};\n\n/**\n * Add a setter.\n *\n * @param {Function} fn\n * @chainable\n */\nSchemaTypeVirtual.prototype.set = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('Setter must be a function!');\n  }\n\n  this.setter = fn;\n\n  return this;\n};\n\n/**\n * Applies getters.\n *\n * @param {*} value\n * @param {Object} data\n * @return {*}\n */\nSchemaTypeVirtual.prototype.cast = function(value, data) {\n  if (typeof this.getter !== 'function') return;\n\n  var getter = this.getter;\n  var hasCache = false;\n  var cache;\n\n  setGetter(data, this.name, function() {\n    if (!hasCache) {\n      cache = getter.call(data);\n      hasCache = true;\n    }\n\n    return cache;\n  });\n};\n\n/**\n * Applies setters.\n *\n * @param {*} value\n * @param {Object} data\n */\nSchemaTypeVirtual.prototype.validate = function(value, data) {\n  if (typeof this.setter === 'function') {\n    this.setter.call(data, value);\n  }\n};\n\nmodule.exports = SchemaTypeVirtual;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/cuid.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar cuid = require('cuid');\nvar ValidationError = require('../error/validation');\n\n/**\n * [CUID](https://github.com/ericelliott/cuid) schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n * @extends {SchemaType}\n */\nfunction SchemaTypeCUID(name, options) {\n  SchemaType.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeCUID, SchemaType);\n\n/**\n * Casts data. Returns a new CUID only if value is null and the field is\n * required.\n *\n * @param {String} value\n * @param {Object} data\n * @return {String}\n */\nSchemaTypeCUID.prototype.cast = function(value, data) {\n  if (value == null && this.options.required) {\n    return cuid();\n  }\n\n  return value;\n};\n\n/**\n * Validates data. A valid CUID must be started with `c` and 25 in length.\n *\n * @param {*} value\n * @param {Object} data\n * @return {String|Error}\n */\nSchemaTypeCUID.prototype.validate = function(value, data) {\n  if (value && (value[0] !== 'c' || value.length !== 25)) {\n    throw new ValidationError('`' + value + '` is not a valid CUID');\n  }\n\n  return value;\n};\n\nmodule.exports = SchemaTypeCUID;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/enum.js":"'use strict';\n\nvar _ = require('lodash');\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar ValidationError = require('../error/validation');\n\nvar assign = _.assign;\nvar includes = _.includes;\n\n/**\n * Enum schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} options\n *   @param {Boolean} [options.required=false]\n *   @param {Array} options.elements\n *   @param {*} [options.default]\n * @extends {SchemaType}\n */\nfunction SchemaTypeEnum(name, options) {\n  SchemaType.call(this, name, assign({\n    elements: []\n  }, options));\n}\n\nutil.inherits(SchemaTypeEnum, SchemaType);\n\n/**\n * Validates data. The value must be one of elements set in the options.\n *\n * @param {*} value\n * @param {Object} data\n * @return {*}\n */\nSchemaTypeEnum.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n  var elements = this.options.elements;\n\n  if (!includes(elements, value)) {\n    throw new ValidationError('The value must be one of ' + elements.join(', '));\n  }\n\n  return value;\n};\n\nmodule.exports = SchemaTypeEnum;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/integer.js":"'use strict';\n\nvar SchemaTypeNumber = require('./number');\nvar util = require('../util');\nvar ValidationError = require('../error/validation');\n\n/**\n * Integer schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} options\n *   @param {Boolean} [options.required=false]\n *   @param {Number|Function} [options.default]\n * @extends {SchemaTypeNumber}\n */\nfunction SchemaTypeInteger(name, options) {\n  SchemaTypeNumber.call(this, name, options);\n}\n\nutil.inherits(SchemaTypeInteger, SchemaTypeNumber);\n\n/**\n * Casts a integer.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeInteger.prototype.cast = function(value_, data) {\n  var value = SchemaTypeNumber.prototype.cast.call(this, value_, data);\n\n  return parseInt(value, 10);\n};\n\n/**\n * Validates an integer.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Number|Error}\n */\nSchemaTypeInteger.prototype.validate = function(value_, data) {\n  var value = SchemaTypeNumber.prototype.validate.call(this, value_, data);\n\n  if (value % 1 !== 0) {\n    throw new ValidationError('`' + value + '` is not an integer!');\n  }\n\n  return value;\n};\n\nmodule.exports = SchemaTypeInteger;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/types/buffer.js":"'use strict';\n\nvar SchemaType = require('../schematype');\nvar util = require('../util');\nvar _ = require('lodash');\nvar ValidationError = require('../error/validation');\n\nvar assign = _.assign;\n\n/**\n * Boolean schema type.\n *\n * @class\n * @param {String} name\n * @param {Object} [options]\n *   @param {Boolean} [options.required=false]\n *   @param {Boolean|Function} [options.default]\n *   @param {String} [options.encoding=hex]\n * @extends {SchemaType}\n */\nfunction SchemaTypeBuffer(name, options) {\n  SchemaType.call(this, name, assign({\n    encoding: 'hex'\n  }, options));\n}\n\nutil.inherits(SchemaTypeBuffer, SchemaType);\n\n/**\n * Casts data.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Buffer}\n */\nSchemaTypeBuffer.prototype.cast = function(value_, data) {\n  var value = SchemaType.prototype.cast.call(this, value_, data);\n\n  if (value == null || Buffer.isBuffer(value)) return value;\n  if (typeof value === 'string') return new Buffer(value, this.options.encoding);\n  if (Array.isArray(value)) return new Buffer(value);\n};\n\n/**\n * Validates data.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Buffer}\n */\nSchemaTypeBuffer.prototype.validate = function(value_, data) {\n  var value = SchemaType.prototype.validate.call(this, value_, data);\n\n  if (!Buffer.isBuffer(value)) {\n    throw new ValidationError('`' + value + '` is not a valid buffer!');\n  }\n\n  return value;\n};\n\n/**\n * Compares between two buffers.\n *\n * @param {Buffer} a\n * @param {Buffer} b\n * @return {Number}\n */\nSchemaTypeBuffer.prototype.compare = function(a, b) {\n  if (Buffer.isBuffer(a)) {\n    return Buffer.isBuffer(b) ? bufferCompare(a, b) : 1;\n  }\n\n  return Buffer.isBuffer(b) ? -1 : 0;\n};\n\n/**\n * Parses data and transform them into buffer values.\n *\n * @param {*} value\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeBuffer.prototype.parse = function(value, data) {\n  return value ? new Buffer(value, this.options.encoding) : value;\n};\n\n/**\n * Transforms data into number to compress the size of database files.\n *\n * @param {Buffer} value\n * @param {Object} data\n * @return {Number}\n */\nSchemaTypeBuffer.prototype.value = function(value, data) {\n  return Buffer.isBuffer(value) ? value.toString(this.options.encoding) : value;\n};\n\n/**\n * Checks the equality of data.\n *\n * @param {Buffer} value\n * @param {Buffer} query\n * @param {Object} data\n * @return {Boolean}\n */\nSchemaTypeBuffer.prototype.match = function(value, query, data) {\n  if (Buffer.isBuffer(value) && Buffer.isBuffer(query)) {\n    return bufferEqual(value, query);\n  }\n\n  return value === query;\n};\n\nfunction bufferCompare(a, b) {\n  if (typeof a.compare === 'function') return a.compare(b);\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction bufferEqual(a, b) {\n  if (typeof a.equals === 'function') return a.equals(b);\n  if (a.length !== b.length) return false;\n\n  for (var i = 0, len = a.length; i < len; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\n\nmodule.exports = SchemaTypeBuffer;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/error/population.js":"'use strict';\n\nvar util = require('../util');\nvar WarehouseError = require('../error');\n\n/**\n * PopulationError constructor\n *\n * @class\n * @param {String} msg\n * @extends WarehouseError\n */\nfunction PopulationError(msg) {\n  WarehouseError.call(this);\n\n  this.name = 'PopulationError';\n  this.message = msg;\n}\n\nutil.inherits(PopulationError, WarehouseError);\n\nmodule.exports = PopulationError;\n","/home/travis/build/npmtest/node-npmtest-warehouse/node_modules/warehouse/lib/mutex.js":"'use strict';\n\nfunction Mutex() {\n  this._locked = false;\n  this._queue = [];\n}\n\nMutex.prototype.lock = function(fn) {\n  if (this._locked) {\n    this._queue.push(fn);\n    return;\n  }\n\n  this._locked = true;\n  fn();\n};\n\nMutex.prototype.unlock = function() {\n  if (!this._locked) return;\n\n  var next = this._queue.shift();\n\n  if (next) {\n    next();\n  } else {\n    this._locked = false;\n  }\n};\n\nmodule.exports = Mutex;\n"}